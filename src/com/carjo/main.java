package com.carjo;


import com.carjo.dialogs.dlg_1_option;
import com.carjo.login.Splash;
import com.carjo.owners.OWNERS_API;
import com.codename1.components.InfiniteProgress;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Preferences;
import com.codename1.push.Push;
import com.codename1.push.PushCallback;
import com.codename1.ui.CN;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class main implements PushCallback {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
//            new erorr_msg(theme, "Connection Error", "There was a networking error in the connection to WiFi", "Ok", null).show();
        });
        InfiniteProgress.setDefaultMaterialDesignMode(true);
        Display.getInstance().lockOrientation(true);
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        Display.getInstance().registerPush();
        new Splash(theme).show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    @Override
    public void push(String value) {
        System.out.println("Received push message: " + value);
        String username = Preferences.get("username", "null").toLowerCase();
        if (!username.equals("null")) {
            if (username.endsWith("_yalla")) {
                if (CN.getCurrentForm().getName().equals("club_orders")) {
                    OWNERS_API club_api = new OWNERS_API();
//                    club_BaseForm.currentListing = club_api.getGymOrders();
                    new dlg_1_option(theme, "New enrollment", "you have new enrollment!!\nplease pull the orders page to show a new order or click on refresh", "Refresh", (e) -> {
//                        new club_orders(theme).show();
                    }).show();
                } else {
                    OWNERS_API club_api = new OWNERS_API();
//                    club_BaseForm.currentListing = club_api.getGymOrders();
                    new dlg_1_option(theme, "New enrollment", "you have new enrollment!!\ngo to orders page to see it", "Ok", null).show();
                }
            } else {
//                new com.yallagym.client.dialogs.erorr(theme, "Push Notification", "A new action has been taken on your order\nDo you want to open orders page now?", "Yes", (e) -> {
//                    new client_orders(theme, new list_form()).show();
//                }).show();
            }

        }
    }
    @Override
    public void registeredForPush(String discard) {
        String DEVICE_ID = Push.getPushKey();
        if (!DEVICE_ID.equals("null")) {
            Preferences.set("pushtoken", DEVICE_ID);
        }
    }

    @Override
    public void pushRegistrationError(String err, int errCode) {
//        System.out.println("An error occurred during push registration.");
//        new erorr_msg(theme, "Push Message", "An error occurred during push registration:" + err, "Ok", null).show();
    }

}
